Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expr
Rule 1     expr -> expr PLUS expr
Rule 2     expr -> expr MINUS expr
Rule 3     expr -> expr TIMES expr
Rule 4     expr -> expr DIVIDE expr
Rule 5     expr -> expr AND expr
Rule 6     expr -> expr OR expr
Rule 7     expr -> NOT expr
Rule 8     expr -> MINUS expr
Rule 9     expr -> LPAREN expr RPAREN
Rule 10    expr -> NUMBER
Rule 11    expr -> BOOLEAN

Terminals, with rules where they appear

AND                  : 5
BOOLEAN              : 11
DIVIDE               : 4
LPAREN               : 9
MINUS                : 2 8
NOT                  : 7
NUMBER               : 10
OR                   : 6
PLUS                 : 1
RPAREN               : 9
TIMES                : 3
error                : 

Nonterminals, with rules where they appear

expr                 : 1 1 2 2 3 3 4 4 5 5 6 6 7 8 9 0

Parsing method: LALR

state 0

    (0) S' -> . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 1

state 1

    (0) S' -> expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    AND             shift and go to state 11
    OR              shift and go to state 12


state 2

    (8) expr -> MINUS . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 13

state 3

    (7) expr -> NOT . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 14

state 4

    (9) expr -> LPAREN . expr RPAREN
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 15

state 5

    (10) expr -> NUMBER .

    PLUS            reduce using rule 10 (expr -> NUMBER .)
    MINUS           reduce using rule 10 (expr -> NUMBER .)
    TIMES           reduce using rule 10 (expr -> NUMBER .)
    DIVIDE          reduce using rule 10 (expr -> NUMBER .)
    AND             reduce using rule 10 (expr -> NUMBER .)
    OR              reduce using rule 10 (expr -> NUMBER .)
    $end            reduce using rule 10 (expr -> NUMBER .)
    RPAREN          reduce using rule 10 (expr -> NUMBER .)


state 6

    (11) expr -> BOOLEAN .

    PLUS            reduce using rule 11 (expr -> BOOLEAN .)
    MINUS           reduce using rule 11 (expr -> BOOLEAN .)
    TIMES           reduce using rule 11 (expr -> BOOLEAN .)
    DIVIDE          reduce using rule 11 (expr -> BOOLEAN .)
    AND             reduce using rule 11 (expr -> BOOLEAN .)
    OR              reduce using rule 11 (expr -> BOOLEAN .)
    $end            reduce using rule 11 (expr -> BOOLEAN .)
    RPAREN          reduce using rule 11 (expr -> BOOLEAN .)


state 7

    (1) expr -> expr PLUS . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 16

state 8

    (2) expr -> expr MINUS . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 17

state 9

    (3) expr -> expr TIMES . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 18

state 10

    (4) expr -> expr DIVIDE . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 19

state 11

    (5) expr -> expr AND . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 20

state 12

    (6) expr -> expr OR . expr
    (1) expr -> . expr PLUS expr
    (2) expr -> . expr MINUS expr
    (3) expr -> . expr TIMES expr
    (4) expr -> . expr DIVIDE expr
    (5) expr -> . expr AND expr
    (6) expr -> . expr OR expr
    (7) expr -> . NOT expr
    (8) expr -> . MINUS expr
    (9) expr -> . LPAREN expr RPAREN
    (10) expr -> . NUMBER
    (11) expr -> . BOOLEAN

    NOT             shift and go to state 3
    MINUS           shift and go to state 2
    LPAREN          shift and go to state 4
    NUMBER          shift and go to state 5
    BOOLEAN         shift and go to state 6

    expr                           shift and go to state 21

state 13

    (8) expr -> MINUS expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    PLUS            reduce using rule 8 (expr -> MINUS expr .)
    MINUS           reduce using rule 8 (expr -> MINUS expr .)
    TIMES           reduce using rule 8 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 8 (expr -> MINUS expr .)
    AND             reduce using rule 8 (expr -> MINUS expr .)
    OR              reduce using rule 8 (expr -> MINUS expr .)
    $end            reduce using rule 8 (expr -> MINUS expr .)
    RPAREN          reduce using rule 8 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]


state 14

    (7) expr -> NOT expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    PLUS            reduce using rule 7 (expr -> NOT expr .)
    MINUS           reduce using rule 7 (expr -> NOT expr .)
    TIMES           reduce using rule 7 (expr -> NOT expr .)
    DIVIDE          reduce using rule 7 (expr -> NOT expr .)
    AND             reduce using rule 7 (expr -> NOT expr .)
    OR              reduce using rule 7 (expr -> NOT expr .)
    $end            reduce using rule 7 (expr -> NOT expr .)
    RPAREN          reduce using rule 7 (expr -> NOT expr .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]


state 15

    (9) expr -> LPAREN expr . RPAREN
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    RPAREN          shift and go to state 22
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    AND             shift and go to state 11
    OR              shift and go to state 12


state 16

    (1) expr -> expr PLUS expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    PLUS            reduce using rule 1 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 1 (expr -> expr PLUS expr .)
    AND             reduce using rule 1 (expr -> expr PLUS expr .)
    OR              reduce using rule 1 (expr -> expr PLUS expr .)
    $end            reduce using rule 1 (expr -> expr PLUS expr .)
    RPAREN          reduce using rule 1 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! TIMES           [ reduce using rule 1 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 1 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]


state 17

    (2) expr -> expr MINUS expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    PLUS            reduce using rule 2 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 2 (expr -> expr MINUS expr .)
    AND             reduce using rule 2 (expr -> expr MINUS expr .)
    OR              reduce using rule 2 (expr -> expr MINUS expr .)
    $end            reduce using rule 2 (expr -> expr MINUS expr .)
    RPAREN          reduce using rule 2 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! TIMES           [ reduce using rule 2 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 2 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]


state 18

    (3) expr -> expr TIMES expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    PLUS            reduce using rule 3 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 3 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 3 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 3 (expr -> expr TIMES expr .)
    AND             reduce using rule 3 (expr -> expr TIMES expr .)
    OR              reduce using rule 3 (expr -> expr TIMES expr .)
    $end            reduce using rule 3 (expr -> expr TIMES expr .)
    RPAREN          reduce using rule 3 (expr -> expr TIMES expr .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]


state 19

    (4) expr -> expr DIVIDE expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    PLUS            reduce using rule 4 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 4 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 4 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 4 (expr -> expr DIVIDE expr .)
    AND             reduce using rule 4 (expr -> expr DIVIDE expr .)
    OR              reduce using rule 4 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 4 (expr -> expr DIVIDE expr .)
    RPAREN          reduce using rule 4 (expr -> expr DIVIDE expr .)

  ! PLUS            [ shift and go to state 7 ]
  ! MINUS           [ shift and go to state 8 ]
  ! TIMES           [ shift and go to state 9 ]
  ! DIVIDE          [ shift and go to state 10 ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]


state 20

    (5) expr -> expr AND expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    AND             reduce using rule 5 (expr -> expr AND expr .)
    OR              reduce using rule 5 (expr -> expr AND expr .)
    $end            reduce using rule 5 (expr -> expr AND expr .)
    RPAREN          reduce using rule 5 (expr -> expr AND expr .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10

  ! PLUS            [ reduce using rule 5 (expr -> expr AND expr .) ]
  ! MINUS           [ reduce using rule 5 (expr -> expr AND expr .) ]
  ! TIMES           [ reduce using rule 5 (expr -> expr AND expr .) ]
  ! DIVIDE          [ reduce using rule 5 (expr -> expr AND expr .) ]
  ! AND             [ shift and go to state 11 ]
  ! OR              [ shift and go to state 12 ]


state 21

    (6) expr -> expr OR expr .
    (1) expr -> expr . PLUS expr
    (2) expr -> expr . MINUS expr
    (3) expr -> expr . TIMES expr
    (4) expr -> expr . DIVIDE expr
    (5) expr -> expr . AND expr
    (6) expr -> expr . OR expr

    OR              reduce using rule 6 (expr -> expr OR expr .)
    $end            reduce using rule 6 (expr -> expr OR expr .)
    RPAREN          reduce using rule 6 (expr -> expr OR expr .)
    PLUS            shift and go to state 7
    MINUS           shift and go to state 8
    TIMES           shift and go to state 9
    DIVIDE          shift and go to state 10
    AND             shift and go to state 11

  ! PLUS            [ reduce using rule 6 (expr -> expr OR expr .) ]
  ! MINUS           [ reduce using rule 6 (expr -> expr OR expr .) ]
  ! TIMES           [ reduce using rule 6 (expr -> expr OR expr .) ]
  ! DIVIDE          [ reduce using rule 6 (expr -> expr OR expr .) ]
  ! AND             [ reduce using rule 6 (expr -> expr OR expr .) ]
  ! OR              [ shift and go to state 12 ]


state 22

    (9) expr -> LPAREN expr RPAREN .

    PLUS            reduce using rule 9 (expr -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 9 (expr -> LPAREN expr RPAREN .)
    TIMES           reduce using rule 9 (expr -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 9 (expr -> LPAREN expr RPAREN .)
    AND             reduce using rule 9 (expr -> LPAREN expr RPAREN .)
    OR              reduce using rule 9 (expr -> LPAREN expr RPAREN .)
    $end            reduce using rule 9 (expr -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 9 (expr -> LPAREN expr RPAREN .)

